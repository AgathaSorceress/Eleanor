//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "library")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub path: String,
    pub filename: String,
    pub source_id: i32,
    pub hash: u32,
    pub artist: Option<String>,
    pub album_artist: Option<String>,
    pub name: Option<String>,
    pub album: Option<String>,
    pub duration: u32,
    pub genres: Option<String>,
    pub track: Option<i32>,
    pub year: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rg_track_gain: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rg_track_peak: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rg_album_gain: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rg_album_peak: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::playlist_entries::Entity")]
    PlaylistEntries,
}

impl Related<super::playlist_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaylistEntries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
